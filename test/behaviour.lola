///
// This file tests different behaviours of the LoLa language and is intended to be run
// via the test suite.
///

// test basic boolean operations
Expect(true);
Expect(true == true);
Expect(false == false);
Expect(false != true);
Expect(true != false);

// test boolean logic not
Expect((not true) == false);
Expect((not false) == true);

// test boolean logic and
Expect((false and false) == false);
Expect((false and true)  == false);
Expect((true  and false) == false);
Expect((true  and true)  == true);

// test boolean logic or
Expect((false or false) == false);
Expect((false or true)  == true);
Expect((true  or false) == true);
Expect((true  or true)  == true);

// test basic arithmetic
Expect((1 + 2) == 3);
Expect((1 - 2) == -1);
Expect((1 * 2) == 2);
Expect((1 / 2) == 0.5);
Expect((1 % 2) == 1);

// test equality
Expect(void == void);

Expect(10 == 10);
Expect(2.2 == 2.2);

Expect("" == "");
Expect("a" == "a");
Expect("abc" == "abc");

Expect([] == []);
Expect([1,2] == [1,2]);
Expect([1,2,3] == [1,2,3]);
Expect([1,"a",void] == [1,"a",void]);

// test relational operators
Expect(1 > 0);
Expect(0 < 1);
Expect(1 >= 0);
Expect(0 <= 1);
Expect(1 >= 1);
Expect(1 <= 1);

Expect((0 > 1) == false);
Expect((1 < 0) == false);
Expect((1 <= 0) == false);
Expect((0 >= 1) == false);


// Test variable assignment
var v;
Expect(v == void);

v = 10;
Expect(v == 10);
Expect(10 == v);

v = "h";
Expect(v == "h");

// Test variable shadowing
v = 1;
Expect(v == 1);
{
  var v = 2;
  Expect(v == 2);
}
Expect(v == 1);

// Test global access
function setV(new) {
  v = new;
}

v = 1;
Expect(v == 1);
setV(2);
Expect(v == 2);

// Test array read indexing
v = [3,4,5];
Expect(v[0] == 3);
Expect(v[1] == 4);
Expect(v[2] == 5);

// Test array writeback indexing
v[0] = 6;
v[1] = 7;
v[2] = 8;
Expect(v[0] == 6);
Expect(v[1] == 7);
Expect(v[2] == 8);

// Test nested arrays indexing:
v = [
  [ 1, 2 ],
  [ 3, 4 ]
];
Expect(v[0] == [ 1, 2 ]);
Expect(v[1] == [ 3, 4 ]);
Expect(v[0][0] == 1);
Expect(v[0][1] == 2);
Expect(v[1][0] == 3);
Expect(v[1][1] == 4);

// Test nested arrays writeback:
v = [
  [ 1, 2 ],
  [ 3, 4 ]
];
Expect(v[0] == [ 1, 2 ]);
Expect(v[1] == [ 3, 4 ]);
// TODO: Fix writeback bug for inner array values
// v[0][1] = 5;
// Print(v);
// Expect(v[0] == [ 1, 5 ]);