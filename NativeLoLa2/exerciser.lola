// LoLa exerciser
// This file covers all possible instructions and constructs
// in the LoLa language

var _; // variable for discarding stuff

var x;

// push_num
// store_global_index
x = 10;

var y = 30; // syntax variant

// load_global_index
// store_global_index
var z = x;

_ = 1 + 1; // add (number)
_ = "Hallo," + " Welt!"; // add (string)
_ = [ 1, 2 ] + [ 3, 4 ]; // add (array)
_ = 1 - 1; // sub
_ = 1 * 1; // mul
_ = 1 / 1; // div
_ = 1 % 1; // mod

_ = true; // push_true
_ = false; // push_false
_ = void; // push_void
_ = "Hello, World!"; // push_string
_ = 10.0; // push_num
_ = [ ]; // array_pack 0
_ = [ true, void, 3 ]; // array_pack *

x = -5; // negate


var a = [ 42.0 ];
_ = a[0]; // array_load
a[0] = 10; // array_store

var a = true;

if(a) { // jif, jmp
  a = 1;
} else {
  a = 2;
}

var a = true;
while(a) { // jif, jmp
  a = false;
}

_ = (1 == 2); // eq
_ = (1 != 2); // neq
_ = (1 <  2); // less
_ = (1 <= 2); // less_eq
_ = (1 >  2); // greater
_ = (1 >= 2); // greater_eq

function LoadStore(a)
{
    var b = a; // load_local, store_local
    return b;  // load_local
}

_ = LoadStore(1); // call_fn (script function)

for(x in [1,2,3]) // iter_make, iter_next
{

}

_ = true and true; // bool_and
_ = false or true; // bool_or
_ = not false;     // bool_not

Print("a"); // call_fn (script function)

Sleep(1); // call_fn (async script function)

Print(valGlobal); // load_global_name

Print(refGlobal); // load_global_name
refGlobal = void; // store_global_name
